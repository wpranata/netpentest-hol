.. _hydrapage:

Hydra
=====
Hydra_ is a parallelized login bruteforce tool which supports numerous protocols to attack.
It is very fast and flexible, and new modules are easy to add.

Hydra_ makes it possible for researchers and security consultants to show how easy it would be to gain unauthorized access to a system remotely.

Usage
-----
To use Hydra_, you can run the following command

.. code-block:: console

    hydra [OPTIONS] [SERVICE://SERVER[:PORT][/OPT]]

- SERVER  the target: ``DNS``, ``IP`` or ``192.168.0.0/24`` (this OR the -M option)
- SERVICE the service to crack (see the table below)
- OPT     some service modules support additional input (-U for module help)

Here are the services supported by Hydra_:

======================= =========================== =============== ========= =========

======================= =========================== =============== ========= =========
adam6500                http-proxy-urlenum          nntp            rexec     snmp
asterisk                icq                         oracle-listener rlogin    socks5
cisco                   imap[s]                     oracle-sid      rpcap     ssh
cisco-enable            irc                         pcanywhere      rsh       sshkey
cobaltstrike            ldap2[s]                    pcnfs           rtsp      svn
cvs                     ldap3[-{cram|digest}md5][s] pop3[s]         s7-300    teamspeak
firebird                memcached                   postgres        sip       telnet[s]
ftp[s]                  mongodb                     radmin2         smb       vmauthd
http[s]-{head|get|post} mssql                       rdp             smtp[s]   vnc
http[s]-{get|post}-form mysql                       redis           smtp-enum xmpp
http-proxy
======================= =========================== =============== ========= =========

Example
-------
By using our own ``username.txt`` and ``password.txt`` list, we can try cracking our own Kali SSH.

.. code-block:: console

    > cat usernames.txt

    andrew
    brandon
    charlie
    dawson
    emily
    frank
    george
    hailey
    isabelle
    jason
    kali

.. code-block:: console

    > cat passwords.txt

    aaaaaaaaaaa
    bbbbbbbbbbb
    ccccccccccc
    ddddddddddd
    eeeeeeeeeee
    fffffffffff
    ggggggggggg
    hhhhhhhhhhh
    iiiiiiiiiii
    jjjjjjjjjjj
    kali

To run Hydra_ on our own Kali SSH Server:

.. code-block:: console

    hydra -L usernames.txt -P passwords.txt ssh://127.0.0.1/

.. code-block:: console

    > hydra -L usernames.txt -P passwords.txt ssh://127.0.0.1/

    Hydra v9.2 (c) 2021 by van Hauser/THC & David Maciejak - Please do not use in military or secret service organizations, or for illegal purposes (this is non-binding, these *** ignore laws and ethics anyway).

    Hydra (https://github.com/vanhauser-thc/thc-hydra) starting at 2022-07-07 01:25:05
    [WARNING] Many SSH configurations limit the number of parallel tasks, it is recommended to reduce the tasks: use -t 4
    [DATA] max 16 tasks per 1 server, overall 16 tasks, 121 login tries (l:11/p:11), ~8 tries per task
    [DATA] attacking ssh://127.0.0.1:22/
    [22][ssh] host: 127.0.0.1   login: kali   password: kali
    1 of 1 target successfully completed, 1 valid password found
    Hydra (https://github.com/vanhauser-thc/thc-hydra) finished at 2022-07-07 01:25:27

The result shows that we can use the credential ``kali`` ``kali`` to login into our Kali SSH Server.

Options
-------
-R
~~~
    restore a previous aborted/crashed session

-I
~~~
    ignore an existing restore file (don't wait 10 seconds)

-S
~~~
    perform an ``SSL`` connect

-s <*PORT*>
~~~~~~~~~~~
    if the service is on a different default ``port``, define it here

.. _lloption:

-l <*LOGIN*> / -L <*FILE*>
~~~~~~~~~~~~~~~~~~~~~~~~~~
    login with ``LOGIN`` name, or load several logins from ``FILE``

.. _ppoption:

-p <*PASS*> / -P <*FILE*>
~~~~~~~~~~~~~~~~~~~~~~~~~
    try password ``PASS``, or load several passwords from ``FILE``

.. _xoption:

-x <*MIN:MAX:CHARSET*>
~~~~~~~~~~~~~~~~~~~~~~
    password bruteforce generation, type ``-x -h`` to get help

-y
~~~
    disable use of symbols in bruteforce, see above

-r
~~~
    use a non-random shuffling method for option :ref:`-x<xoption>`

-e <*n|s|r*>
~~~~~~~~~~~~
    try ``n`` null password, ``s`` login as pass and/or ``r`` reversed login

-u
~~~
    loop around users, not passwords (effective! implied with :ref:`-x<xoption>`)

-C <*FILE*>
~~~~~~~~~~~
    colon separated ``login:pass`` format, instead of :ref:`-L<lloption>`/:ref:`-P<ppoption>` options

.. _moption:

-M <*FILE*>
~~~~~~~~~~~
    list of servers to attack, one entry per line, ``:`` to specify port

.. _ooption:

-o <*FILE*>
~~~~~~~~~~~
    write found login/password pairs to ``FILE`` instead of stdout

-b <*FORMAT*>
~~~~~~~~~~~~~
    specify the format for the :ref:`-o<ooption>` ``FILE``: ``text``(default), ``json``, ``jsonv1``

-f / -F
~~~~~~~
    exit when a login/pass pair is found (:ref:`-M<moption>`: ``-f`` per host, ``-F`` global)

-t <*TASKS*>
~~~~~~~~~~~~
    run ``TASKS`` number of connects in parallel per target (default: ``16``)

-T <*TASKS*>
~~~~~~~~~~~~
    run ``TASKS`` connects in parallel overall (for :ref:`-M<moption>`, default: ``64``)

-w / -W <*TIME*>
~~~~~~~~~~~~~~~~
    wait time for a response (``32``) / between connects per thread (``0``)

-c <*TIME*>
~~~~~~~~~~~
    wait time per login attempt over all threads (enforces ``-t 1``)

-4 / -6
~~~~~~~
    use ``IPv4`` (default) / ``IPv6`` addresses (put always in [] also in :ref:`-M<moption>`)

-v / -V / -d
~~~~~~~~~~~~
    verbose mode / show login+pass for each attempt / debug mode 

-O
~~~
    use old ``SSL v2`` and ``SSL v3``

-K
~~~
    do not redo failed attempts (good for :ref:`-M<moption>` mass scanning)

-q
~~~
    do not print messages about connection errors

.. _uoption:

-U
~~~
    service module usage details

-m <*OPT*>
~~~~~~~~~~
    options specific for a module, see :ref:`-U<uoption>` output for information

-h
~~~
    more command line options (COMPLETE HELP)

.. _Hydra: https://www.kali.org/tools/hydra/