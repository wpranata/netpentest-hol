.. _dirbusterpage:

Dirb (Dirbuster)
================
Dirb_ is a Web Content Scanner.
It looks for existing (and/or hidden) Web Objects.
It basically works by launching a dictionary based bruteforce attack against a web server and analyzing the responses.

.. note::

    To use Dirb with GUI, you can use `Dirbuster <https://www.kali.org/tools/dirbuster/>`_.

Usage
-----
The easiest way to start using Dirb_ is to run this command:

.. code-block:: console

    dirb [TARGET] [WORDLIST] [OPTIONS]

Example
-------
To scan ``http://192.168.233.134:8000`` for any available web contents using Dirb's included wordlist ``common.txt``,  we can run the command:

.. code-block:: console

    dirb http://192.168.233.134:8000 /usr/share/dirb/wordlists/common.txt

.. code-block:: console

    > dirb http://192.168.233.134:8000 /usr/share/dirb/wordlists/common.txt

    -----------------
    DIRB v2.22    
    By The Dark Raver
    -----------------

    START_TIME: Wed Jul  6 02:40:53 2022
    URL_BASE: http://192.168.233.134:8000/
    WORDLIST_FILES: /usr/share/dirb/wordlists/common.txt

    -----------------

    GENERATED WORDS: 4612

    ---- Scanning URL: http://192.168.233.134:8000/ ----
    + http://192.168.233.134:8000/_images (CODE:301|SIZE:0)                     
    + http://192.168.233.134:8000/index.html (CODE:200|SIZE:62007)              
    + http://192.168.233.134:8000/reporting (CODE:301|SIZE:0)                   
                                                                                
    -----------------
    END_TIME: Wed Jul  6 02:41:08 2022
    DOWNLOADED: 4612 - FOUND: 3

The result shows there are 3 available web contents:

- ``/_images``
- ``/index.html``
- ``/reporting``

.. note::

    There might be more web contents available, but is not included in the wordlist.

    To do a pure bruteforce, you can either use `Dirbuster <https://www.kali.org/tools/dirbuster/>`_, the GUI version of Dirb, or `dirb-gendict`_ to generate your own dictionary.

Options
-------

-a <*agent_string*>
~~~~~~~~~~~~~~~~~~~
    Specify your custom ``USER_AGENT``. (Default is: ``Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1)``)

-b
~~~
    Don't squash or merge sequences of ``/../`` or ``/./`` in the given ``URL``.

-c <*cookie_string*>
~~~~~~~~~~~~~~~~~~~~
    Set a ``cookie`` for the HTTP request.

-E <*certificate*>
~~~~~~~~~~~~~~~~~~
    Use the specified ``client certificate`` file.

-f
~~~
    Fine tunning of ``NOT_FOUND 404`` detection.

-H <*header_string*>
~~~~~~~~~~~~~~~~~~~~
    Add a custom ``header`` to the HTTP request.

-i
~~~
    Use case-insensitive Search.

-l
~~~
    Print ``Location`` header when found.

-N <*nf_code*>
~~~~~~~~~~~~~~
    Ignore responses with this ``HTTP code``.

-o <*output_file*>
~~~~~~~~~~~~~~~~~~
    Save output to disk.

-p <*proxy[:port]*>
~~~~~~~~~~~~~~~~~~~
    Use this proxy. (Default port is ``1080``)

-P <*proxy_username:proxy_password*>
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Proxy Authentication.

-r
~~~
    Don't Search Recursively.

-R
~~~
    Interactive Recursion. (Ask in which directories you want to scan)

-S
~~~
    Silent Mode. Don't show tested words. (For dumb terminals)

-t
~~~
    Don't force an ending ``'/'`` on ``URL``.

-u <*username:password*>
~~~~~~~~~~~~~~~~~~~~~~~~
    ``Username`` and ``password`` to use.

-v
~~~
    Show Also Not Existent Pages.

-w
~~~
    Don't Stop on ``WARNING`` messages.

-x <*extensions_file*>
~~~~~~~~~~~~~~~~~~~~~~
    Amplify search with ``extensions`` on ``file``.

-X <*extensions*>
~~~~~~~~~~~~~~~~~
    Amplify search with ``extensions``.

-z <*milisecs*>
~~~~~~~~~~~~~~~
    Delay requests per-``miliseconds``.

dirb-gendict
------------
dirb-gendict_ is used to Generate dictionary incrementally.

Usage
~~~~~

.. code-block:: console

    dirb-gendict [TYPE] [PATTERN]

.. important::

    ``PATTERN`` must be an **ascii string** in which every ``X`` character wildcard will be replaced with the incremental value.

Example
~~~~~~~

.. code-block:: console

    > dirb-gendict -n thisword_X

This will generate ``thisword_0``, ``thisword_1``, ``thisword_2``, ``...``,  ``thisword_9``

Type
~~~~

-n
^^^
    numeric ``0-9``

-c
^^^
    character ``a-z``

-C
^^^
    uppercase character ``A-Z``

-h
^^^
    hexa ``0-f``

-a
^^^
    alfanumeric ``0-9a-z``

-s
^^^
    case sensitive alfanumeric ``0-9a-zA-Z``


html2dic
--------
html2dic_ is used to extract all words from an HTML page, generating a dictionary of all word found, one word per line.
Output is printed on stdout.

Usage
~~~~~

.. code-block:: console

    html2dic [FILE]

.. _Dirb: https://www.kali.org/tools/dirb/
.. _dirb-gendict: https://www.kali.org/tools/dirb/
.. _html2dic: https://www.kali.org/tools/dirb/